amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2 #0.2 #rotation에서 추정된 odometry rotation의 noise
    alpha2: 0.2 #0.2 #translation에서 추정된 odometry rotation의 noise
    alpha3: 0.2 #0.2 #translation에서 추정된 odometry translation의 noise
    alpha4: 0.2 #0.2 #rotation에서 추정된 odometry translation의 noise
    alpha5: 0.2 #0.2 #translation noise
    base_frame_id: "base_link" #robot base frame default base_footprint jackal은 base_link
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000 # 2000
    min_particles: 500 # 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential" #nav2_amcl::DifferentialMotionModel differential로 바꾸니까 됨
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 0.5 # 0.2 remotePC와 robot의 timesync 차이 --> 이걸 올려주면 jackal이 몇초 더 가는거같은데 뭔지 살펴봐야겠음
    update_min_a: 0.2 #0.2
    update_min_d: 0.25 #0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: /scan #default scan /scan 바꿔도 똑같음
    # map_topic: map
    # set_initial_pose: false
    # always_reset_initial_pose: false
    # first_map_only: false


amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True #simulation에서 제공하는 시간 사용 여부(bool, Default=false)
    global_frame: map #reference name(string, Default=map)
    robot_base_frame: base_link #BT xml파일 경로(string, Default=base_link)
    # transform_tolerance: 0.1  #TF transform tolerance(double, Default=0.1(Sec))
    #default_nav_to_pose_bt_xml: replace/with/path/to/bt.xml   #NavigateToPose의 xml file 경로(string, Default=N/A)
    #default_nav_through_poses_bt_xml: replace/with/path/to/bt.xml   #NavigateThroughPoses의 xml file경로(string, Default=N/A)
    #goal_blackboard_id: goal   #NavigateToPoses의 BT에 goal을 전달하는 변수(string, Default="goal")
    #goals_blackboard_id: goals   #NavigateThroughPoses의 BT에 goal들을 전달하는 변수(string, Default="goals")
    #path_blackboard_id: path   #NavigateThroughPoses 의 BT의 경로(string, Default="path")
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True #default bt groot live monitoring enable
    groot_zmq_publisher_port: 1666 #default port
    groot_zmq_server_port: 1667 #default
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:  #behavior tree node 공유 라이브러리 목록(vector<string>)
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node #galactic
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    #galactic
    - nav2_single_trigger_bt_node 
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 4.0 #20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3 #add
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] #previous foxy version "goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0 #5.0
      publish_frequency: 2.0 #2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      # robot_radius: 0.1 # galactic add
      footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"
      # plugins: ["obstacle_layer", "inflation_layer"]
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0 #default 3.0
        inflation_radius: 0.4 # 0.55
      # obstacle_layer: # foxy, galactic X
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: True
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0 #galactic add
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 #costmap을 update할 빈도(double, Default=5.0)
      publish_frequency: 1.0 #costmap을 topic으로 publish할 빈도(double, Default=1.0)
      global_frame: map #reference frame(string, Default="map")
      robot_base_frame: base_link #robot base frame(string, Default="base_link")
      use_sim_time: True
      footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"
      robot_radius: 0.1 # robot radius(if used, no footprint points)
      resolution: 0.05 #costmap 1 pixel의 해상도(double, Default=0.1)
      # width: 20
      # height: 20
      # origin_x: -10.0
      # origin_y: -10.0
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # "voxel_layer",#type of plugin to be loaded in the namespace(vector<string>, Default)
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer" #default
        enabled: True
        observation_sources: scan #data source의 namespace
        scan:
          topic: /scan
          max_obstacle_height: 2.0 #점유 grid에 return할 최대 높이
          min_obstacle_height: 0.0
          obstacle_max_range: 2.5  #costmap에 표시할 obstacle 최대 범위
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0  #costmap에서 raytrace로 장애물을 제거할 최대 범위
          raytrace_min_range: 0.0
          clearing: True #raytrace 제거를 할지 여부
          marking: True  #mark할지 여부
          data_type: "LaserScan" #input의 데이터형(LaserScan or PointCloud2)
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0 #voxel표시를 시작할 지점
        z_resolution: 0.05
        z_voxels: 16 #표시할 voxel 수(최대 16)
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0 #3.0
        enabled: true
        inflation_radius: 0.55 #0.25
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "/home/bj/ros2gal_ws/src/jackal/jackal_navigation/maps/hri_lab.yaml"
    # topic_name: "map"
    # frame_id: "map"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0 # 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 1.0 #20.0
    use_sim_time: True
    planner_plugins: ["GridBased"] #mapped plugin의 list
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    # default plugin들의 parameter
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True
    # transform_tolerance: 1.0

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false #특정 waypoint에 navigate하지 못했을 경우 true-->stop, false-->다음 waypoint로(bool, Default=true)
    waypoint_task_executor_plugin: "wait_at_waypoint"   #waypoint에 도달 시 수행할 task를 정의(string, Default='wait_at_waypoint')
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

lifecycle_manager:
  ros__parameters:
    use_sim_time: True
    autostart: true
    node_names: ['controller_server', 'planner_server', 'recoveries_server', 'bt_navigator', 'waypoint_follower']
    bond_timeout: 4.0
    attempt_respawn_reconnection: true
    bond_respawn_max_duration: 10.0